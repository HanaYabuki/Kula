expression  ::= assignment
            ;

assignment  ::= (call ".")? IDENTIFIER ("=" | ":=") assignment
            |   logicOr 
            ;

logicOr     ::= logicAnd ("or" logicAnd)* ;

logicAnd    ::= equality ("and" equality)* ;

equality    ::= comparison (("!=" | "==") comparison)* ;

comparison  ::= term ((">" | ">=" | "<" | "<=") term)* ;

term        ::= factor (( "-" | "+" ) factor)* ;

factor      ::= unary (( "*" | "/" ) unary)* ;

unary       ::= ("!" | "-") unary | call ;

call        ::= primary ("(" arguments ? ")" | "." IDENTIFIER)* ;

type        ::= IDENTIFIER ("<" type ">")? ;

primary     ::= "true" | "false" | "null" | "this" 
            |   NUMBER | STRING | IDENTIFIER 
            |   "(" expression ")" 
            |   function
            ;

function    ::= "func" lambda ;

lambda      ::= "(" (IDENTIFIER (":" type)?) ")" ("=>" type)? block ;
